name: AI-Guard

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master]
  workflow_dispatch:

jobs:
  guard:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Lint (flake8)
        run: flake8 src tests

      - name: Static type check (mypy)
        run: mypy src

      - name: Security scan (bandit)
        run: bandit -c .bandit -r src -x tests -s B101 -q || true

      - name: Run tests with coverage
        run: |
          export PYTHONPATH="$GITHUB_WORKSPACE"
          python -m pytest tests/ -q --maxfail=1 --disable-warnings --cov=src --cov-report=xml:coverage.xml
      
      - name: Re-run tests with speculative tests
        run: |
          export PYTHONPATH="$GITHUB_WORKSPACE"
          python -m pytest tests/ -q --maxfail=1 --disable-warnings --cov=src --cov-report=xml:coverage.xml
      - name: Dependency vulnerability scan (pip-audit)
        run: pip-audit -r requirements.txt --severity-level high || true

      - name: Enforce quality gates
        run: |
          export PYTHONPATH="$GITHUB_WORKSPACE"
          python -m ai_guard.analyzer --min-cov 80 --skip-tests --sarif ai-guard.sarif || true

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ai-guard.sarif
        if: always()

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: ai-guard
          name: ai-guard-coverage
          fail_ci_if_error: false
