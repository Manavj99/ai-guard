name: CI Matrix

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-matrix:
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Skip Windows on Python 3.12 for now if there are compatibility issues
          - python-version: '3.12'
            os: windows-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting
        run: |
          flake8 src tests

      - name: Run type checking
        run: |
          mypy src

      - name: Run security scan
        run: |
          bandit -r src -c .bandit -q || true

      - name: Run tests with coverage
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  quality-gates:
    needs: test-matrix
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run AI-Guard quality gates
        run: |
          export PYTHONPATH="$GITHUB_WORKSPACE"
          python -m src.ai_guard.analyzer --min-cov 80 --skip-tests --report-format json --report-path quality-report.json

      - name: Display quality report
        run: |
          cat quality-report.json

      - name: Check quality gates
        run: |
          python -c "
          import json
          with open('quality-report.json', 'r') as f:
              data = json.load(f)
              if not data['summary']['passed']:
                  print('❌ Quality gates failed!')
                  for gate in data['summary']['gates']:
                      if not gate['passed']:
                          print(f'  - {gate[\"name\"]}: {gate[\"details\"]}')
                  exit(1)
              else:
                  print('✅ All quality gates passed!')
          "

  build-package:
    needs: [test-matrix, quality-gates]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30
