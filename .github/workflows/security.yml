name: Security

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    paths:
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'setup.py'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Bandit security scan
        run: |
          bandit -r src -c .bandit -f json -o bandit-report.json || true

      - name: Run pip-audit
        run: |
          pip-audit -r requirements.txt --format json --output pip-audit-report.json || true

      - name: Run safety check
        run: |
          pip install safety
          safety check -r requirements.txt --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            pip-audit-report.json
            safety-report.json
          retention-days: 90

      - name: Create SARIF from security reports
        run: |
          python -c "
          import json
          import sys
          
          # Combine security reports into SARIF format
          sarif = {
              'version': '2.1.0',
              'runs': [{
                  'tool': {'driver': {'name': 'AI-Guard Security Scanner', 'version': '0.1.0'}},
                  'results': []
              }]
          }
          
          # Process Bandit results
          try:
              with open('bandit-report.json', 'r') as f:
                  bandit_data = json.load(f)
                  for issue in bandit_data.get('results', []):
                      sarif['runs'][0]['results'].append({
                          'ruleId': f'bandit:{issue.get('issue_text', 'unknown')}',
                          'level': 'warning' if issue.get('severity') == 'Low' else 'error',
                          'message': {'text': issue.get('issue_text', 'Security issue found')},
                          'locations': [{
                              'physicalLocation': {
                                  'artifactLocation': {'uri': issue.get('filename', 'unknown')},
                                  'region': {'startLine': issue.get('line_number', 1)}
                              }
                          }]
                      })
          except FileNotFoundError:
              pass
          
          # Process pip-audit results
          try:
              with open('pip-audit-report.json', 'r') as f:
                  audit_data = json.load(f)
                  for vuln in audit_data.get('vulnerabilities', []):
                      sarif['runs'][0]['results'].append({
                          'ruleId': f'pip-audit:{vuln.get('id', 'unknown')}',
                          'level': 'error',
                          'message': {'text': f'Vulnerability: {vuln.get('description', 'Security vulnerability found')}'},
                          'locations': [{
                              'physicalLocation': {
                                  'artifactLocation': {'uri': 'requirements.txt'},
                                  'region': {'startLine': 1}
                              }
                          }]
                      })
          except FileNotFoundError:
              pass
          
          # Write SARIF output
          with open('security.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          "

      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security.sarif

  dependency-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-tools
        run: pip install pip-tools

      - name: Check for outdated dependencies
        run: |
          pip list --outdated --format=json > outdated.json
          cat outdated.json

      - name: Create dependency update issue
        if: hashFiles('outdated.json') != hashFiles('outdated.json.bak')
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            let outdated;
            try {
              outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
            } catch (e) {
              outdated = [];
            }
            
            if (outdated.length > 0) {
              const body = `## Outdated Dependencies Found
              
              The following dependencies have newer versions available:
              
              ${outdated.map(dep => `- **${dep.name}**: ${dep.version} â†’ ${dep.latest_version}`).join('\n')}
              
              ### Recommended Actions:
              1. Review the changelogs for breaking changes
              2. Test with updated versions
              3. Update requirements.txt and pyproject.toml
              4. Run full test suite
              
              ---
              *This issue was automatically generated by the security workflow*`;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ”’ Dependency Updates Available',
                body: body,
                labels: ['security', 'dependencies', 'automated']
              });
            }
